---
title: "Lab 7"
author: "Eva"
format: 
  html: 
    self-contained: true
    code-tools: true
    code-fold: true
editor: visual
execute: 
  echo: true
  include: true
  message: false
  warning: false
---

```{r}
library(tidyverse)
library(here)
```

```{r}
# loading in data
fish <- read_csv(here("Week 7", "Blackfootfish.csv"))
```

## Part One

### Summaries and missing data

1)  What variable(s) have missing values present? How many observations within each variable have missing values?

```{r}

fish |>
  summarize(
    across(.cols = trip:species, 
          .fns = ~ sum(is.na(.x)))
  )

```

The total number of missing variables is 1796 and they are all located in the weight column.

2)  Visualizing missing data

```{r}
# Source for staggering the labels on the x axis: https://ggplot2.tidyverse.org/reference/guide_axis.html
# Source for labeller: https://ggplot2.tidyverse.org/reference/labellers.html

fish |>
  filter(is.na(weight)
         ) |>
  ggplot(mapping = aes(x = as.factor(year), fill = section)) +  
  geom_bar() +
  facet_wrap(~trip, labeller = label_both) +
  scale_x_discrete(guide = guide_axis(n.dodge = 2)) +
  labs(x = "Year", y = "Frequency",
       title = "Missing Weight Data by Year, Trip, and Section")
```

## Part Two

### Writing a function

1)  Let's transform the repeated process above into a rescale_01() function. The function should take a single vector as its input. The function should return the rescaled vector.

### Adding stops

Now, let's incorporate some checks into your function! Modify your previous code to create the following checks: 1) the function should stop if the input vector is not numeric 2) the function should stop if the length of the vector is not greater than 1

```{r}

rescale_01 <- function(x) {
   stopifnot(is.numeric(x), length(x) > 1)
  
  rangex <- range(x, na.rm = TRUE)
  return((x - rangex[1]) / (rangex[2] - rangex[1]))
  
}
```

### Preforming a simple test

First, test your function on the simple vector below. Add code that verifies the maximum of your rescaled vector is 1 and the minimum is 0!

```{r}
x <- c(1:85, NA)

test <- rescale_01(x)
range(test, na.rm = TRUE)

```

### Preforming a more difficult test

Next, let's test the function on the length column of the BlackfootFish dataset.

Make plots of the original values of length and the rescaled values of length. Output your plots stacked vertically, so the reader can confirm the only aspect that has changed is the scale.

```{r}
#|layout-ncol

ggplot(data = fish, mapping = aes(x = rescale_01(fish$length))) +  
  geom_histogram() +
  labs(x = "Fish Length Rescaled", y = "Frequency",
       title = "Fish Length Rescaled by Frequency")

ggplot(data = fish, mapping = aes(x = length)) +  
  geom_histogram() +
  labs(x = "Fish Length", y = "Frequency",
       title = "Fish Length by Frequency")

```

### Incorporating variables

Suppose you would like to make a more general rescale_column() function that perform operations on any variable within a dataset. Ideally, your function would take a dataframe and a variable name as inputs and return a dataframe where the variable has been rescaled.

Create a rescale_column() that accepts two arguments:

a dataframe the name(s) of the variable(s) to be rescaled The body of the function should call the original rescale_01() function you wrote previously.

```{r}

rescale_column <- function(data, variables) {
  
  stopifnot(is.data.frame(data))
  
  data <- data |>
    mutate(across(.cols = {{variables}}, 
                  ~ rescale_01(.x))
                  )
  
  data
}

```

### Another function test

Alright, now let's put your rescale_column() function to work! Use your rescale_column() function to rescale both the length and weight columns.

```{r}

rescale_column(fish, c(length, weight))

```
## Revision Reflection

I realized that I had to change my thinking for question 2 because I was not plotting the missing data correctly and I had to add as.factor() to the year so I could see what the measurements for each year were. I also added the labeller to facet_wrap() so it would change the label to trip: 1 and trip: 2 instead of 1 and 2 which gives a more context to the graph. For question 4 I realized that I needed to use histograms instead of barplots because barplots are not used for numerical variables. Also, using histograms makes the visual a lot more clear.