---
title: "Lab 5"
author: "Eva Dykaar"
format: 
  html: 
    self-contained: true
    code-tools: true
editor: visual
execute: 
  echo: true
  include: true
  message: false
  warning: false
---

```{r}
library(tidyverse)
library(here)
library(forcats)
```

```{r}
surveys <- read_csv(here("Week 2", "surveys.csv"))
```

### Revisiting Lab 2

1.  Let's start with the side-by-side boxplots you created in Week 2, to visualize the distribution of weight within each species (not species ID!).
2.  Now that you've reordered, look at your y-axis label. That's long! Let's take Will Chase's advice and move the y-axis label to the top of the plot.

```{r}
# Source for fct_reorder: https://forcats.tidyverse.org/reference/fct_reorder.html

ggplot(data = surveys, mapping = aes(x =  weight, 
                                     y = fct_reorder(species, weight, .desc = TRUE))) +  
       geom_jitter(color = "cadetblue", alpha = 0.05) +
       geom_boxplot() +
       labs(x = "Weight (grams)", y = " ", title = "Species of Rodent by Weight")


```

### Time Series Plot

1.  Create a visualization how weights vary for each genus over the duration of the study.

```{r}

ggplot(data = surveys, mapping = aes(x =  year, y = weight, color = genus)) +  
  geom_line(stat = "identity") +
  labs(x = "Year", y = "Weight(grams)",
       title = "Time Series Genus of Rodent")

```

2.  Calculate and plot the mean weight for each genus for each year.
3.  Reorder the lines so the mean weights go in descending order (largest to smallest).
4.  Now that you've reordered the lines, look at your legend's label. That's terrible! Let's give the legend a new title and move the information from the y-axis to the plot title.

```{r}
surveys1 <- surveys |>
  group_by(genus, year) |>
  mutate(mean_weight = mean(weight))

ggplot(data = surveys1, mapping = aes(x = year, 
                                     y = mean_weight,
                                     color = fct_reorder(genus, 
                                                         mean_weight, .desc = TRUE))) +  
  geom_line(stat = "identity") +
  labs(x = "Year", y = " ",
       title = "Time Series Genus of Rodent by Weight(grams)",
       col = "Genus")

```

### Captures over the Week

1.  Create a visualization of the number of rodents captured each day of the week.
2.  Change the order of the day of the week to go Monday through Sunday.

```{r}
# Source for how to rearrange the weekdays: https://posit.cloud/learn/cheat-sheets

surveys2 <- surveys |>
  mutate(day_of_week = as.factor(day_of_week), 
         day_of_week = fct_relevel(day_of_week, 
                                   "Mon", "Tue", "Wed",
                                      "Thu", "Fri", "Sat", 
                                      "Sun"))

  

ggplot(data = surveys2, mapping = aes(x = day_of_week)) +  
  geom_bar() + 
  labs(x = "Day of Week", y = " ", 
       title = "Number of Rodents Captured by Day")
```

3.  Collapse Monday through Friday into a "Weekday" level, and collapse Saturday and Sunday into a "Weekend" level. Plot the number of rodents captured between the two groups.

```{r}
# #Source for fct_collapse: https://cran.r-project.org/web/packages/forcats/forcats.pdf

surveys2 |>
  drop_na(day_of_week) |>
  mutate(day_of_week = fct_collapse(day_of_week,
               weekdays = c("Mon", "Tue", "Wed", "Thu", "Fri"),
               weekend = c("Sat", "Sun"))) |>
  ggplot(mapping = aes(x = day_of_week)) +
  geom_bar() +
  labs(x = "Day of Week", y = " ",
       title = "Number of Rodents Captured by Day")



```

### Re-substitution Reflection

I would like to use a token for this extra re-submission. For question 3 in the time series part I needed to change the order of the legend to match the order of the lines in the graph. My thinking changed on this because I realized I needed to use the fct_reorder() in the color aesthetic which will color genus and reorder by mean_weight in a descending order. For question 2 in the weekly captures I realized that I needed to mutate my day_of_week column into a factor and then use the fct_relevel from the forcats library to change the order of the day of week. For question 2 in the weekly captures I realized that I needed to use fct_collapse() inside of a mutate and because it is in a pipeline from surveys2, I can just use the came of the column (day_of_week) inside the fct_collapse function. I also piped this straight into the ggplot and so I did not need to repeat that data = surveys2 and was able to make that more efficient.
